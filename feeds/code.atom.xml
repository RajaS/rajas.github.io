<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Reach Beyond Grasp</title><link href="http://rajaselvaraj.co.in/" rel="alternate"></link><link href="http://rajaselvaraj.co.in/feeds/code.atom.xml" rel="self"></link><id>http://rajaselvaraj.co.in/</id><updated>2013-06-15T00:00:00+05:30</updated><entry><title>Using wfdbtools</title><link href="http://rajaselvaraj.co.in/using-wfdbtools.html" rel="alternate"></link><published>2013-06-15T00:00:00+05:30</published><updated>2013-06-15T00:00:00+05:30</updated><author><name>Raja Selvaraj</name></author><id>tag:rajaselvaraj.co.in,2013-06-15:using-wfdbtools.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/RajaS/ecgtk/blob/master/ecgtk/wfdbtools.py"&gt;wfdbtools&lt;/a&gt; is a pure python module for accessing and using the waveform data in &lt;a href="http://www.physionet.org/physiobank/"&gt;Physiobank&lt;/a&gt;. Provides rdsamp and rdann which are the python equivalents of the wfdb applications of similar names. A deliberate attempt is made to try to keep names and usage similar to the original wfdb applications for simplicity of&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;The only dependency that will need to be installed is numpy. However, to use the function plot_data, which is an utility function for interactive use, you need to have matplotlib also&amp;nbsp;installed.&lt;/p&gt;
&lt;p&gt;Example&amp;nbsp;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::python

from wfdbtools import rdsamp, rdann, plot_data
from pprint import pprint

# Record is a format 212 record from physiobank.
# Note that name of record does not include extension.
record  = 'samples/format212/100'

# Read in the data from 0 to 10 seconds
data, info = rdsamp(record, 0, 10)

# returned data is an array. The columns are time(samples),
# time(seconds), signal1, signal2
print data.shape
(3600, 4)

# info is a dictionary containing header information
pprint info
{'first_values': [995, 1011],
'gains': [200, 200],
'samp_count': 650000,
'samp_freq': 360,
'signal_names': ['MLII', 'V5'],
'zero_values': [1024, 1024]}

# And now read the annotation
ann = rdann(record, 'atr', 0, 10)

# ann has 3 columns - sample number, time (sec) and annotation code
print(ann[:4,:])
array([[  18.   ,    0.05 ,   28.   ],
           [  77.   ,    0.214,    1.   ],
       [ 370.   ,    1.028,    1.   ],
           [ 662.   ,    1.839,    1.   ]])


# Plot the data and the mark the annotations
plot_data(data, info, ann)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class='inset center' src='/images/wfdb_plot.png' title='Plot' width='600px' /&gt;&lt;/p&gt;</summary><category term="python"></category><category term="linux"></category><category term="ecg"></category></entry><entry><title>Hotkey to toggle touchpad on Thinkpad x220</title><link href="http://rajaselvaraj.co.in/hotkey-to-toggle-touchpad-on-thinkpad-x220.html" rel="alternate"></link><published>2012-05-31T00:00:00+05:30</published><updated>2012-05-31T00:00:00+05:30</updated><author><name>Raja Selvaraj</name></author><id>tag:rajaselvaraj.co.in,2012-05-31:hotkey-to-toggle-touchpad-on-thinkpad-x220.html</id><summary type="html">&lt;p&gt;My thinkpad x220 is my third thinkpad and the first one with a touchpad. While I find it useful specifically for scrolling documents and for zooming in and out for images, it can also come in the way the rest of the time hen I am primarily using the keyboard and trackpoint. So I wanted to be able to toggle the touchpad on and off using a key.
&lt;!-- more --&gt;
xinput gave me the following output, so I know the id for my touchpad is&amp;nbsp;11.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;⎡ Virtual core pointer                      id=2    [master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]
⎜   ↳ TPPS/2 IBM TrackPoint                     id=13   [slave  pointer  (2)]
⎜   ↳ SynPS/2 Synaptics TouchPad                id=11   [slave  pointer  (2)]
⎣ Virtual core keyboard                     id=3    [master keyboard (2)]
    ↳ Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]
    ↳ Power Button                              id=6    [slave  keyboard (3)]
    ↳ Video Bus                                 id=7    [slave  keyboard (3)]
    ↳ Sleep Button                              id=8    [slave  keyboard (3)]
    ↳ Integrated Camera                         id=9    [slave  keyboard (3)]
    ↳ AT Translated Set 2 keyboard              id=10   [slave  keyboard (3)]
    ↳ ThinkPad Extra Buttons                    id=12   [slave  keyboard (3)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then starting from &lt;a href="https://help.ubuntu.com/community/SynapticsTouchpad/ShortcutKey"&gt;here&lt;/a&gt;, I wrote the following simple&amp;nbsp;script.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; #!/bin/sh

 # I know my trackpad device id is 11
 tp_enabled=`xinput list-props 11 | grep "Device Enabled" | awk '{print $4}'`

 # if enabled, disable it
 if [ $tp_enabled = 1 ]
 then
     xinput set-prop 11 "Device Enabled" 0 &amp;amp;&amp;amp; notify-send 'Trackpad disabled'

 # if disabled, enable it
 elif [ $tp_enabled = 0 ]
 then
     xinput set-prop 11 "Device Enabled" 1 &amp;amp;&amp;amp; notify-send 'Trackpad enabled'

 else
 notify-send 'Could not get trackpad status'
 fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class='inset right' src='/images/toggle_trackpad_screenshot.png' title='screenshot' width='600px' /&gt;&lt;/p&gt;
&lt;p&gt;Depending on whether the touchpad is enabled or not (getting it from &amp;#8216;xinput list-props 11&amp;#8217;), the script accordingly turns it on or off, by using &amp;#8216;xinput set-prop&amp;#8217;. In addition a notification appears through notify-osd. I put this script in my path, made it executable and then bound it to F5 (System Settings -&amp;gt; Keyboard -&amp;gt; Shortcuts -&amp;gt; Custom shortcuts). It works perfectly, with the only issue being that the norification bubble stays for 10 seconds and although the man page for notify-send lists the argument &amp;#8212;expire-time, this does not work. This apparently is a long-standing bug/feature(?) and I didn&amp;#8217;t want to &lt;a href="http://askubuntu.com/questions/128474/how-to-customize-on-screen-notifications"&gt;go to some lengths&lt;/a&gt; at present to work around&amp;nbsp;this.&lt;/p&gt;</summary><category term="linux"></category><category term="thinkpad"></category></entry><entry><title>Textcontrol with smart autocompletion for wxpython</title><link href="http://rajaselvaraj.co.in/textcontrol-with-smart-autocompletion-for-wxpython.html" rel="alternate"></link><published>2012-05-23T00:00:00+05:30</published><updated>2012-05-23T00:00:00+05:30</updated><author><name>Raja Selvaraj</name></author><id>tag:rajaselvaraj.co.in,2012-05-23:textcontrol-with-smart-autocompletion-for-wxpython.html</id><summary type="html">&lt;p&gt;For my own use I needed a text entry widget in wxpython that allows smart autocompletion from a list of choices. By smart autocompletion, I mean choices should be displayed in a dropdown box and text entry should narrow down to matching choices. Match should be configurable to beginning only or anywhere within the string. Starting off from &lt;a href="http://wiki.wxpython.org/TextCtrlAutoComplete"&gt;this&lt;/a&gt;, I wrote my own textcontrol widget with autocomplete. A list of choices can be passed to the widget and matches can be configured. Check it out on &lt;a href="https://github.com/RajaS/ACTextCtrl"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class='inset left' src='/images/actextctrl_screenshot.png' title='Autocomplete in action' width='600px' /&gt;&lt;/p&gt;</summary><category term="python"></category><category term="wxpython"></category></entry></feed>